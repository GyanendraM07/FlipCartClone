package com.wishcart.admin.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

@RestController
@RequestMapping("/admin-seller")
public class AdminSellerController {
  
	/*
	 * Rest temp Start Using Rest Template We can Communicate between microservice
	 * its syncronous private final RestTemplate restTemplate;
	 * 
	 * @Autowired public AdminSellerController(RestTemplate restTemplate) {
	 * this.restTemplate = restTemplate; }
	 * 
	 * @GetMapping("/all") public ResponseEntity<List<Map<String, Object>>>
	 * getAllSellers() { String sellerServiceUrl =
	 * "http://localhost:9090/seller/sellerData"; ResponseEntity<List<Map<String,
	 * Object>>> response = restTemplate.exchange(sellerServiceUrl, HttpMethod.GET,
	 * null, new ParameterizedTypeReference<List<Map<String, Object>>>() { });
	 * 
	 * // Process the response and return data to the client return response; }
	 * 
	 * Rest temp End
	 */
	
//	Web client start 
//	using web Client we can communicate Btween microservices its Asyncronous 
//	wee need import this
//	dependency to
//	use Webclient<dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-webflux</artifactId></dependency>
	/*
	 * web ClientStart
	 * 
	 * private final WebClient webClient;
	 * 
	 * @Autowired public AdminSellerController(WebClient.Builder webClientBuilder) {
	 * this.webClient = webClientBuilder.baseUrl("http://localhost:9090").build(); }
	 * 
	 * @GetMapping("/all") public ResponseEntity<List<Map<String, Object>>>
	 * getAllSellers() { String sellerServiceUrl = "/seller/sellerData";
	 * 
	 * return webClient.get() .uri(sellerServiceUrl) .retrieve() .toEntity(new
	 * ParameterizedTypeReference<List<Map<String, Object>>>() {}) .block(); }
	 * 
	 * web Client-end
	 */
	@GetMapping("/request")
	public ResponseEntity<HashMap<String, Object>> getSellerRequest() {
		return null;

	}
	
	 @KafkaListener(topics = "admin-topic", groupId = "admin-group")
	    public void listenToAdminMessages(String message) {
	        // Process the received message
	        System.err.println("Received message in seller: " + message);
	        // Add your business logic to process the message here
	    }

}
